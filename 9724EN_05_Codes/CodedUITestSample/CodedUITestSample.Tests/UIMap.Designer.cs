// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CodedUITestSample.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AssertPalindrome - Use 'AssertPalindromeExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertPalindrome()
        {
            #region Variable Declarations
            WpfText uIThereverseiskehsihbAText = this.UIMainWindowWindow.UIThereverseiskehsihbAText;
            #endregion

            // Verify that the 'DisplayText' property of 'The reverse is : kehsihbA' label contains 'kehsihbA'
            StringAssert.Contains(uIThereverseiskehsihbAText.DisplayText, this.AssertPalindromeExpectedValues.UIThereverseiskehsihbATextDisplayText, "Failed to Reverse");

            // Verify that the 'DisplayText' property of 'The reverse is : kehsihbA' label contains 'palindrome'
            StringAssert.Contains(uIThereverseiskehsihbAText.DisplayText, this.AssertPalindromeExpectedValues.UIThereverseiskehsihbATextDisplayText1, "palindrome failed");
        }
        
        /// <summary>
        /// AssertReverse_1 - Use 'AssertReverse_1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertReverse_1()
        {
            #region Variable Declarations
            WpfText uIThereverseiskehsihbAText = this.UIMainWindowWindow.UIThereverseiskehsihbAText;
            #endregion

            // Verify that the 'DisplayText' property of 'The reverse is : kehsihbA' label contains 'kehsihbA'
            StringAssert.Contains(uIThereverseiskehsihbAText.DisplayText, this.AssertReverse_1ExpectedValues.UIThereverseiskehsihbATextDisplayText);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uITxtInputEdit = this.UIMainWindowWindow.UITxtInputEdit;
            WpfButton uIReverseButton = this.UIMainWindowWindow.UIReverseButton;
            WpfText uIThereverseiskehsihbAText = this.UIMainWindowWindow.UIThereverseiskehsihbAText;
            WpfButton uITryAgainButton = this.UIMainWindowWindow.UITryAgainButton;
            #endregion

            // Type '{RShiftKey}' in 'txtInput' text box
            Keyboard.SendKeys(uITxtInputEdit, this.RecordedMethod1Params.UITxtInputEditSendKeys, ModifierKeys.None);

            // Click 'Reverse' button
            Mouse.Click(uIReverseButton, new Point(30, 11));

            // Click 'The reverse is : kehsihbA' label
            Mouse.Click(uIThereverseiskehsihbAText, new Point(115, 6));

            // Click 'Try Again' button
            Mouse.Click(uITryAgainButton, new Point(148, 15));

            // Type 'madam' in 'txtInput' text box
            uITxtInputEdit.Text = this.RecordedMethod1Params.UITxtInputEditText;

            // Click 'Reverse' button
            Mouse.Click(uIReverseButton, new Point(43, 10));

            // Click 'The reverse is : kehsihbA' label
            Mouse.Click(uIThereverseiskehsihbAText, new Point(170, 8));
        }
        
        #region Properties
        public virtual AssertPalindromeExpectedValues AssertPalindromeExpectedValues
        {
            get
            {
                if ((this.mAssertPalindromeExpectedValues == null))
                {
                    this.mAssertPalindromeExpectedValues = new AssertPalindromeExpectedValues();
                }
                return this.mAssertPalindromeExpectedValues;
            }
        }
        
        public virtual AssertReverse_1ExpectedValues AssertReverse_1ExpectedValues
        {
            get
            {
                if ((this.mAssertReverse_1ExpectedValues == null))
                {
                    this.mAssertReverse_1ExpectedValues = new AssertReverse_1ExpectedValues();
                }
                return this.mAssertReverse_1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertPalindromeExpectedValues mAssertPalindromeExpectedValues;
        
        private AssertReverse_1ExpectedValues mAssertReverse_1ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertPalindrome'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertPalindromeExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'The reverse is : kehsihbA' label contains 'kehsihbA'
        /// </summary>
        public string UIThereverseiskehsihbATextDisplayText = "kehsihbA";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of 'The reverse is : kehsihbA' label contains 'palindrome'
        /// </summary>
        public string UIThereverseiskehsihbATextDisplayText1 = "palindrome";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertReverse_1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertReverse_1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'DisplayText' property of 'The reverse is : kehsihbA' label contains 'kehsihbA'
        /// </summary>
        public string UIThereverseiskehsihbATextDisplayText = "kehsihbA";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '{RShiftKey}' in 'txtInput' text box
        /// </summary>
        public string UITxtInputEditSendKeys = "{RShiftKey}";
        
        /// <summary>
        /// Type 'madam' in 'txtInput' text box
        /// </summary>
        public string UITxtInputEditText = "madam";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfEdit UITxtInputEdit
        {
            get
            {
                if ((this.mUITxtInputEdit == null))
                {
                    this.mUITxtInputEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITxtInputEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "txtInput";
                    this.mUITxtInputEdit.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITxtInputEdit;
            }
        }
        
        public WpfButton UIReverseButton
        {
            get
            {
                if ((this.mUIReverseButton == null))
                {
                    this.mUIReverseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIReverseButton.SearchProperties[WpfButton.PropertyNames.Name] = "Reverse";
                    this.mUIReverseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIReverseButton;
            }
        }
        
        public WpfButton UITryAgainButton
        {
            get
            {
                if ((this.mUITryAgainButton == null))
                {
                    this.mUITryAgainButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITryAgainButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnAgain";
                    this.mUITryAgainButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITryAgainButton;
            }
        }
        
        public UIMainWindowTitleBar UIMainWindowTitleBar
        {
            get
            {
                if ((this.mUIMainWindowTitleBar == null))
                {
                    this.mUIMainWindowTitleBar = new UIMainWindowTitleBar(this);
                }
                return this.mUIMainWindowTitleBar;
            }
        }
        
        public WpfText UIThereverseiskehsihbAText
        {
            get
            {
                if ((this.mUIThereverseiskehsihbAText == null))
                {
                    this.mUIThereverseiskehsihbAText = new WpfText(this);
                    #region Search Criteria
                    this.mUIThereverseiskehsihbAText.SearchProperties[WpfText.PropertyNames.AutomationId] = "tbReversedText";
                    this.mUIThereverseiskehsihbAText.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIThereverseiskehsihbAText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUITxtInputEdit;
        
        private WpfButton mUIReverseButton;
        
        private WpfButton mUITryAgainButton;
        
        private UIMainWindowTitleBar mUIMainWindowTitleBar;
        
        private WpfText mUIThereverseiskehsihbAText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMainWindowTitleBar : WpfTitleBar
    {
        
        public UIMainWindowTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUICloseButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICloseButton;
        #endregion
    }
}
