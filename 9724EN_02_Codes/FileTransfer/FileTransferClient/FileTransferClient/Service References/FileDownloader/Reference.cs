//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FileTransferClient.FileDownloader {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FileDownloader.IFileTransferLibrary")]
    public interface IFileTransferLibrary {
        
        // CODEGEN: Generating message contract since the operation UploadFile is neither RPC nor document wrapped.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferLibrary/UploadFile", ReplyAction="http://tempuri.org/IFileTransferLibrary/UploadFileResponse")]
        FileTransferClient.FileDownloader.UploadFileResponse UploadFile(FileTransferClient.FileDownloader.ResponseFile request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferLibrary/UploadFile", ReplyAction="http://tempuri.org/IFileTransferLibrary/UploadFileResponse")]
        System.IAsyncResult BeginUploadFile(FileTransferClient.FileDownloader.ResponseFile request, System.AsyncCallback callback, object asyncState);
        
        FileTransferClient.FileDownloader.UploadFileResponse EndUploadFile(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper name (RequestFile) of message RequestFile does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileTransferLibrary/DownloadFile", ReplyAction="http://tempuri.org/IFileTransferLibrary/DownloadFileResponse")]
        FileTransferClient.FileDownloader.ResponseFile DownloadFile(FileTransferClient.FileDownloader.RequestFile request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IFileTransferLibrary/DownloadFile", ReplyAction="http://tempuri.org/IFileTransferLibrary/DownloadFileResponse")]
        System.IAsyncResult BeginDownloadFile(FileTransferClient.FileDownloader.RequestFile request, System.AsyncCallback callback, object asyncState);
        
        FileTransferClient.FileDownloader.ResponseFile EndDownloadFile(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="ResponseFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class ResponseFile {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long byteStart;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public ResponseFile() {
        }
        
        public ResponseFile(string FileName, long Length, long byteStart, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.Length = Length;
            this.byteStart = byteStart;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadFileResponse {
        
        public UploadFileResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RequestFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RequestFile {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long byteStart;
        
        public RequestFile() {
        }
        
        public RequestFile(string FileName, long byteStart) {
            this.FileName = FileName;
            this.byteStart = byteStart;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileTransferLibraryChannel : FileTransferClient.FileDownloader.IFileTransferLibrary, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DownloadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DownloadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public long Length {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
        
        public long byteStart {
            get {
                base.RaiseExceptionIfNecessary();
                return ((long)(this.results[1]));
            }
        }
        
        public System.IO.Stream FileByteStream {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.IO.Stream)(this.results[2]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileTransferLibraryClient : System.ServiceModel.ClientBase<FileTransferClient.FileDownloader.IFileTransferLibrary>, FileTransferClient.FileDownloader.IFileTransferLibrary {
        
        private BeginOperationDelegate onBeginUploadFileDelegate;
        
        private EndOperationDelegate onEndUploadFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginDownloadFileDelegate;
        
        private EndOperationDelegate onEndDownloadFileDelegate;
        
        private System.Threading.SendOrPostCallback onDownloadFileCompletedDelegate;
        
        public FileTransferLibraryClient() {
        }
        
        public FileTransferLibraryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileTransferLibraryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferLibraryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileTransferLibraryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadFileCompleted;
        
        public event System.EventHandler<DownloadFileCompletedEventArgs> DownloadFileCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileTransferClient.FileDownloader.UploadFileResponse FileTransferClient.FileDownloader.IFileTransferLibrary.UploadFile(FileTransferClient.FileDownloader.ResponseFile request) {
            return base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, long Length, long byteStart, System.IO.Stream FileByteStream) {
            FileTransferClient.FileDownloader.ResponseFile inValue = new FileTransferClient.FileDownloader.ResponseFile();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.byteStart = byteStart;
            inValue.FileByteStream = FileByteStream;
            FileTransferClient.FileDownloader.UploadFileResponse retVal = ((FileTransferClient.FileDownloader.IFileTransferLibrary)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileTransferClient.FileDownloader.IFileTransferLibrary.BeginUploadFile(FileTransferClient.FileDownloader.ResponseFile request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadFile(string FileName, long Length, long byteStart, System.IO.Stream FileByteStream, System.AsyncCallback callback, object asyncState) {
            FileTransferClient.FileDownloader.ResponseFile inValue = new FileTransferClient.FileDownloader.ResponseFile();
            inValue.FileName = FileName;
            inValue.Length = Length;
            inValue.byteStart = byteStart;
            inValue.FileByteStream = FileByteStream;
            return ((FileTransferClient.FileDownloader.IFileTransferLibrary)(this)).BeginUploadFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileTransferClient.FileDownloader.UploadFileResponse FileTransferClient.FileDownloader.IFileTransferLibrary.EndUploadFile(System.IAsyncResult result) {
            return base.Channel.EndUploadFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUploadFile(System.IAsyncResult result) {
            FileTransferClient.FileDownloader.UploadFileResponse retVal = ((FileTransferClient.FileDownloader.IFileTransferLibrary)(this)).EndUploadFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            long Length = ((long)(inValues[1]));
            long byteStart = ((long)(inValues[2]));
            System.IO.Stream FileByteStream = ((System.IO.Stream)(inValues[3]));
            return this.BeginUploadFile(FileName, Length, byteStart, FileByteStream, callback, asyncState);
        }
        
        private object[] OnEndUploadFile(System.IAsyncResult result) {
            this.EndUploadFile(result);
            return null;
        }
        
        private void OnUploadFileCompleted(object state) {
            if ((this.UploadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileAsync(string FileName, long Length, long byteStart, System.IO.Stream FileByteStream) {
            this.UploadFileAsync(FileName, Length, byteStart, FileByteStream, null);
        }
        
        public void UploadFileAsync(string FileName, long Length, long byteStart, System.IO.Stream FileByteStream, object userState) {
            if ((this.onBeginUploadFileDelegate == null)) {
                this.onBeginUploadFileDelegate = new BeginOperationDelegate(this.OnBeginUploadFile);
            }
            if ((this.onEndUploadFileDelegate == null)) {
                this.onEndUploadFileDelegate = new EndOperationDelegate(this.OnEndUploadFile);
            }
            if ((this.onUploadFileCompletedDelegate == null)) {
                this.onUploadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileDelegate, new object[] {
                        FileName,
                        Length,
                        byteStart,
                        FileByteStream}, this.onEndUploadFileDelegate, this.onUploadFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileTransferClient.FileDownloader.ResponseFile FileTransferClient.FileDownloader.IFileTransferLibrary.DownloadFile(FileTransferClient.FileDownloader.RequestFile request) {
            return base.Channel.DownloadFile(request);
        }
        
        public long DownloadFile(ref string FileName, ref long byteStart, out System.IO.Stream FileByteStream) {
            FileTransferClient.FileDownloader.RequestFile inValue = new FileTransferClient.FileDownloader.RequestFile();
            inValue.FileName = FileName;
            inValue.byteStart = byteStart;
            FileTransferClient.FileDownloader.ResponseFile retVal = ((FileTransferClient.FileDownloader.IFileTransferLibrary)(this)).DownloadFile(inValue);
            FileName = retVal.FileName;
            byteStart = retVal.byteStart;
            FileByteStream = retVal.FileByteStream;
            return retVal.Length;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult FileTransferClient.FileDownloader.IFileTransferLibrary.BeginDownloadFile(FileTransferClient.FileDownloader.RequestFile request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDownloadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDownloadFile(string FileName, long byteStart, System.AsyncCallback callback, object asyncState) {
            FileTransferClient.FileDownloader.RequestFile inValue = new FileTransferClient.FileDownloader.RequestFile();
            inValue.FileName = FileName;
            inValue.byteStart = byteStart;
            return ((FileTransferClient.FileDownloader.IFileTransferLibrary)(this)).BeginDownloadFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        FileTransferClient.FileDownloader.ResponseFile FileTransferClient.FileDownloader.IFileTransferLibrary.EndDownloadFile(System.IAsyncResult result) {
            return base.Channel.EndDownloadFile(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndDownloadFile(System.IAsyncResult result, out long Length, out long byteStart, out System.IO.Stream FileByteStream) {
            FileTransferClient.FileDownloader.ResponseFile retVal = ((FileTransferClient.FileDownloader.IFileTransferLibrary)(this)).EndDownloadFile(result);
            Length = retVal.Length;
            byteStart = retVal.byteStart;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileName;
        }
        
        private System.IAsyncResult OnBeginDownloadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            long byteStart = ((long)(inValues[1]));
            return this.BeginDownloadFile(FileName, byteStart, callback, asyncState);
        }
        
        private object[] OnEndDownloadFile(System.IAsyncResult result) {
            long Length = this.GetDefaultValueForInitialization<long>();
            long byteStart = this.GetDefaultValueForInitialization<long>();
            System.IO.Stream FileByteStream = this.GetDefaultValueForInitialization<System.IO.Stream>();
            string retVal = this.EndDownloadFile(result, out Length, out byteStart, out FileByteStream);
            return new object[] {
                    Length,
                    byteStart,
                    FileByteStream,
                    retVal};
        }
        
        private void OnDownloadFileCompleted(object state) {
            if ((this.DownloadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DownloadFileCompleted(this, new DownloadFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DownloadFileAsync(string FileName, long byteStart) {
            this.DownloadFileAsync(FileName, byteStart, null);
        }
        
        public void DownloadFileAsync(string FileName, long byteStart, object userState) {
            if ((this.onBeginDownloadFileDelegate == null)) {
                this.onBeginDownloadFileDelegate = new BeginOperationDelegate(this.OnBeginDownloadFile);
            }
            if ((this.onEndDownloadFileDelegate == null)) {
                this.onEndDownloadFileDelegate = new EndOperationDelegate(this.OnEndDownloadFile);
            }
            if ((this.onDownloadFileCompletedDelegate == null)) {
                this.onDownloadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDownloadFileCompleted);
            }
            base.InvokeAsync(this.onBeginDownloadFileDelegate, new object[] {
                        FileName,
                        byteStart}, this.onEndDownloadFileDelegate, this.onDownloadFileCompletedDelegate, userState);
        }
    }
}
